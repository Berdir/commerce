<?php

/**
 * @file
 * Functional tests for the commerce payment module user interface.
 */

/**
 * Test payment API.
 */
class CommercePaymentTest extends CommerceBaseTestCase {
  /**
   * Order object.
   */
  protected $order;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Payment',
      'description' => 'Test the payment API',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $product = $this->createDummyProduct('PROD-01', 'Product One', 100, 'USD', $uid);
    $products[$product->product_id] = 1;

    $this->order = $this->createDummyOrder(1, $products);
    debug($this->order);

  }

  /**
   * Tests the paid in full hook invocation.
   */
  function testPaidInFull() {
    // Create a payment, should not execute the paid in full hook.
    // Invoke the payment methods event that will populate the order with
    // an array of method IDs for available payment methods.
    $this->order->payment_methods = array();
    rules_invoke_all('commerce_payment_methods', $this->order);

    // Sort the payment methods array by the enabling Rules' weight values.
    uasort($this->order->payment_methods, 'drupal_sort_weight');
    $payment_method = reset($this->order->payment_methods);
    commerce_payment_example_transaction($payment_method, $this->order, array('amount' => 50, 'currency_code' => 'USD'), 'Test');
    $this->assertTrue(empty($this->order->data['commerce_payment_order_paid_in_full_invoked']), 'Paid in full not yet invoked');

    // Create a second payment, this should invoke the hook.
    commerce_payment_example_transaction($payment_method, $this->order, array('amount' => 50, 'currency_code' => 'USD'), 'Test 2');
    $this->assertFalse(empty($this->order->data['commerce_payment_order_paid_in_full_invoked']));



    // @todo: Actually test that the hook is executed exactly once.
  }

}
